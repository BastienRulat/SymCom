/**
 * Formation => Symfony 5 : Le guide complet par Lior Chamla
 * Section   => La sécurité : authentification
 * Chapter   => Les échecs possibles pendant l'authentification
 *
 * MySubject => Les test de conformité sur la route et sur la méthode http ne suffisent pas.
 */
 
// PREMIERE EBAUCHE
// ON S'ASSURE QUE LES PARAMETRES EXISTENT BIEN
// ON FILTRE DIRECTEMENT DANS SUPPORTS
// ON EVITE AINSI DES ERREURS SERVEURS 500
// QUI NE SONT PAS CAPTURES PAR LA METHODE ONAUTHENTICATIONFAILURE

public function supports(Request $request) {

    // Test de conformité sur la route et sur la méthode http
    if ($request->attributes->get('_route') !== 'security_login' && !$request->isMethod('POST')) return false;
    
    // Test de conformité du form login
    $param = $request->request->getIterator('parameters')->key();
    if (is_null($param) || $param !== "login") return false;
    $login = $request->request->getIterator('parameters')->current();
    
    // Test d'existence des credentials, un cas mal géré par défaut dans notre LoginFormAuthenticator
    if (!isset(
        $login['email'],
        $login['password'],
        $login['_token']
    )) return false;

    return true;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////


// DEUXIEME EBAUCHE
// ON FILTRE AU NIVEAU OU L'ERREUR APPARAIT UNE PREMIERE FOIS
// ON LEVE LES EXCEPTIONS POUR RECUPERE NOS MESSAGES DANS NOTRE FORMULAIRE


public function supports(Request $request) {
    
    // Test de conformité de la route et de la méthode http
    return $request->attributes->get('_route') === 'security_login' && $request->isMethod('POST');
}

public function getCredentials(Request $request) {

    // Contrairement à get qui renvoit null,
    // all renvoit [] si login n'xiste pas
    // Du coup pas la peine de tester l'ErrorException
    // N.B. Cet usage de get est déprécié.

    return $request->request->all('login');
}

public function getUser($credentials, UserProviderInterface $userProvider) {

    // Esquive d'une ErrorException 1 premiere fois
    try {
        if (!isset($credentials['email'])) throw new ErrorException();
        return $userProvider->loadUserByUsername($credentials['email']);
    } catch (ErrorException $e) {
        throw new AuthenticationException ("Mail manqaant");
    } catch (UsernameNotFoundException $e) {
        throw new AuthenticationException ("Mail erroné");
    }
}

public function checkCredentials($credentials, UserInterface $user) {

    // Esquive d'une ErrorException 1 deuxieme fois
    try {
        if (!isset($credentials['password'])) throw new ErrorException();
    } catch (ErrorException $e) {
        throw new AuthenticationException("Mdp manquant");
    }    
    
    $isValid = $this->encoder->isPasswordValid($user, $credentials['password']);
    if (!$isValid) {
        throw new AuthenticationException ("Mdp erronné");
    }
    
    return true;
}

public function onAuthenticationFailure(Request $request, AuthenticationException $exception) {

    $request->attributes->set(Security::AUTHENTICATION_ERROR, $exception);
    $request->attributes->set(Security::LAST_USERNAME, $request->request->get('login')['email'] ?? '');
}

public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $providerKey) {

    return new RedirectResponse("/");
}
